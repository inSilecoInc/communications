{
  "hash": "667a5b0840519c361df9f62840a701fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Freshwater stream\nexecute:\n  warning: false\n  message: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"<i><b>Code</b></i>\"\nknitr:\n  opts_chunk:\n    out.width: \"80%\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(sf)\nlibrary(terra)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\n\n# Source functions\n# dir(\"manuscript/R\", full.names = TRUE) |>\ndir(\"R\", full.names = TRUE) |>\n  lapply(source, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$value\nfunction (data, window_size, period_start = NULL, period_end = NULL, \n    wrap = TRUE) \n{\n    library(RcppRoll)\n    library(dplyr)\n    data <- data %>% mutate(date = as.Date(date))\n    if (wrap) {\n        wrapped_data <- bind_rows(data, head(data, window_size - \n            1))\n    }\n    else {\n        wrapped_data <- data\n    }\n    if (!is.null(period_start) & !is.null(period_end)) {\n        period_start <- as.Date(period_start)\n        period_end <- as.Date(period_end)\n        period_data <- wrapped_data %>% filter(date >= period_start & \n            date <= period_end)\n    }\n    else {\n        period_data <- wrapped_data\n    }\n    wrapped_data <- wrapped_data %>% mutate(rolling_risk = roll_sum(cum_risk, \n        n = window_size, fill = NA, align = \"center\"))\n    if (nrow(period_data) > 0) {\n        period_data <- period_data %>% mutate(rolling_risk = roll_sum(cum_risk, \n            n = window_size, fill = NA, align = \"center\"))\n        optimal_window <- period_data[which.min(period_data$rolling_risk), \n            ]\n    }\n    else {\n        optimal_window <- wrapped_data[which.min(wrapped_data$rolling_risk), \n            ]\n    }\n    return(optimal_window)\n}\n\n[[1]]$visible\n[1] FALSE\n\n\n[[2]]\n[[2]]$value\nfunction (dat, name) \n{\n    ggplot(dat, aes(x = x, y = y, fill = presence)) + geom_tile() + \n        facet_grid(month ~ life_stage) + scale_fill_gradientn(colors = viridis::viridis(100), \n        na.value = \"grey\", name = \"Presence\") + labs(x = \"Longitude\", \n        y = \"Latitude\", title = name) + coord_fixed() + theme_minimal() + \n        theme(axis.text.x = element_text(angle = 45, hjust = 1), \n            strip.text = element_text(size = 8), panel.grid = element_blank())\n}\n\n[[2]]$visible\n[1] FALSE\n\n\n[[3]]\n[[3]]$value\nfunction (grd, tab, value_col) \n{\n    tab <- dplyr::arrange(tab, by = \"cell_id\")\n    grd$newcol <- NA\n    grd$newcol[tab[[\"cell_id\"]]] <- tab[[value_col]]\n    grd <- grd$newcol\n    names(grd) <- value_col\n    return(grd)\n}\n\n[[3]]$visible\n[1] FALSE\n\n\n[[4]]\n[[4]]$value\nfunction (risk_data, timing_data, title = \"Cumulative Risk with Optimal Timing Windows\") \n{\n    library(ggplot2)\n    library(dplyr)\n    timing_data <- timing_data %>% mutate(start_date = as.Date(format(date, \n        \"%Y-%m-01\")), end_date = as.Date(format(date + 31, \"%Y-%m-01\")) - \n        1)\n    ggplot(risk_data, aes(x = date, y = cum_risk, group = integrated)) + \n        geom_line(color = \"blue\") + geom_point(color = \"darkblue\", \n        size = 2) + facet_wrap(~integrated, labeller = labeller(integrated = c(`TRUE` = \"Integrated\", \n        `FALSE` = \"Non-Integrated\"))) + geom_rect(data = timing_data, \n        aes(xmin = start_date, xmax = end_date, ymin = -Inf, \n            ymax = Inf, fill = as.factor(integrated)), inherit.aes = FALSE, \n        alpha = 0.2) + scale_fill_manual(values = c(`TRUE` = \"green\", \n        `FALSE` = \"yellow\"), labels = c(\"Integrated\", \"Non-Integrated\"), \n        name = \"Timing Window\") + labs(title = title, x = \"Date\", \n        y = \"Cumulative Risk\") + theme_minimal() + theme(panel.grid.minor = element_blank(), \n        strip.text = element_text(size = 10, face = \"bold\"), \n        plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"), \n        axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n[[4]]$visible\n[1] FALSE\n\n\n[[5]]\n[[5]]$value\nfunction (centers, raster_grid, period, time_steps = seq.Date(period[[1]], \n    period[[2]], by = \"month\"), n_samples = 200, bandwidth = 50, \n    prob_threshold = 0.5) \n{\n    if (!inherits(raster_grid, \"SpatRaster\")) \n        stop(\"raster_grid must be a SpatRaster\")\n    if (!is.matrix(centers)) \n        stop(\"centers must be a matrix of coordinates\")\n    centers_sf <- st_as_sf(as.data.frame(centers), coords = c(\"V1\", \n        \"V2\"), crs = st_crs(raster_grid))\n    results <- list(pts = list(), ras = list())\n    kernel <- focalMat(raster_grid, d = bandwidth, type = \"circle\")\n    for (time in seq_len(length(time_steps))) {\n        pts <- do.call(rbind, lapply(1:nrow(centers), function(i) {\n            offsets <- data.frame(x = rnorm(n_samples, mean = st_coordinates(centers_sf[i, \n                ])[1], sd = bandwidth), y = rnorm(n_samples, \n                mean = st_coordinates(centers_sf[i, ])[2], sd = bandwidth))\n            st_as_sf(offsets, coords = c(\"x\", \"y\"), crs = st_crs(raster_grid))\n        }))\n        ras <- focal(rasterize(vect(dplyr::mutate(pts, weight = 1)), \n            raster_grid, field = \"weight\", fun = sum, background = 0), \n            w = kernel, fun = mean, na.rm = TRUE)\n        results$pts[[as.character(time_steps[time])]] <- pts\n        results$ras[[as.character(time_steps[time])]] <- ras\n    }\n    raster_stack <- rast(results$ras)\n    raster_stack <- raster_stack/max(global(raster_stack, max, \n        na.rm = TRUE)$max)\n    raster_stack <- raster_stack * raster_grid$aoi\n    results$ras <- raster_stack\n    results$ras_df <- tidyr::pivot_longer(as.data.frame(raster_stack, \n        xy = TRUE), -c(x, y), names_to = \"date\", values_to = \"presence\")\n    return(results)\n}\n\n[[5]]$visible\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Time steps\nstart_date <- as.Date(\"2024-01-01\")\nend_date <- as.Date(\"2024-12-31\")\ntime_steps <- seq.Date(start_date, end_date, by = \"month\")\n```\n:::\n\n\n## Freshwater Stream Example: Fish Species and Stressors\n\nIn this example, we focus on a freshwater lake ecosystem, home to three fish species: lake trout (*Salvelinus namaycush*), yellow perch (*Perca flavescens*), and cisco (*Coregonus artedi*). The selected life processes—spawning, natal, and rearing—are critical to their reproductive success and population stability. The main known human activies in the lake are dredging, which results in increased sedimentation, agriculture, which results in contaminant runoffs in the lake, and a ferry that connects the northern and southern shores of the lakes. \n\nLet us now construct this example and ultimately assess cumulative risks in an attempt to propose management options for human interventions. \n\n## Area of interest \n\nLet us begin by defining a fictitious area of interest\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the polygon representing the area of interest (aoi)\n# Define coordinates for an elongated lake with irregularities\nlake_coords <- matrix(c(\n  0, 0,\n  600, 25,\n  1000, 100,\n  900, 300,\n  800, 400,\n  600, 300,\n  400, 300,\n  300, 200,\n  100, 100,\n  0, 0\n), ncol = 2, byrow = TRUE)\n\n# Create the sf polygon\naoi <- st_polygon(list(lake_coords)) |>\n  st_sfc(crs = 32198) |>\n  st_sf() |>\n  smoothr::smooth(method = \"chaikin\") |>\n  st_as_sf()\n\n# Step 2: Create a raster grid from the polygon\n# Create an empty raster with the extent of the AOI\ngrd <- rast(ext(aoi), resolution = 5)\n\n# Rasterize the polygon into the grid\ngrd <- rasterize(vect(aoi), grd, field = 1)\ngrd$cell_id <- seq_len(ncell(grd))\nnames(grd) <- c(\"aoi\", \"cell_id\")\n\n# Plot the outputs to verify\nplot(grd$aoi, main = \"Rasterized AOI\", col = \"#1dfede\")\nplot(aoi, add = TRUE, border = \"#7c9894\", lwd = 4)\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/unnamed-chunk-2-1.png){width=80%}\n:::\n\n```{.r .cell-code}\n# Convert raster to a tabular format with cell IDs\ngrd_table <- as.data.frame(grd, xy = TRUE) |>\n  na.omit()\n```\n:::\n\n\n## Species and Life Processes\n\nWe will now simulate the distribution of life stages for the three fish species considered on a weekly basis for a typical year. \n\n### Lake trout\n\nA top predator in the lake ecosystem, lake trout are sensitive to environmental changes. Lake trout spawn in the fall, usually from late September to early November, in cold, oxygen-rich shallow waters. After spawning, the eggs remain in the substrate over the winter and hatch in the early spring, often in April or May, depending on water temperature and latitude. The rearing process occurs in deeper waters, where juveniles grow before moving to adult habitats. Spawning habitat disruption due to sedimentation can severely impact the species' reproductive success.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define life stage periods (spawning, natal, rearing)\nlife_stages <- data.frame(\n  life_stage = c(\"spawning\", \"natal\", \"rearing\"),\n  start_date = as.Date(c(\"2024-10-01\", \"2024-04-01\", \"2024-06-01\")),\n  end_date = as.Date(c(\"2024-11-30\", \"2024-05-31\", \"2024-08-31\"))\n)\n\n# Create spatial zones for life processes\n# Spawning\nlt_spawning <- simulate_life_process(\n  centers = matrix(c(800, 200), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"spawning\", 2:3]\n)\nlt_spawning$ras_df$life_stage <- \"spawning\"\n\n# Natal\nlt_natal <- simulate_life_process(\n  centers = matrix(c(850, 900, 325, 100), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"natal\", 2:3],\n  bandwidth = 40\n)\nlt_natal$ras_df$life_stage <- \"natal\"\n\n# Natal\nlt_rearing <- simulate_life_process(\n  centers = matrix(c(750, 700, 650, 600, 175, 170, 165, 160), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"rearing\", 2:3],\n  bandwidth = 40\n)\nlt_rearing$ras_df$life_stage <- \"rearing\"\n\n# Bind together\nlake_trout <- dplyr::bind_rows(lt_spawning$ras_df, lt_natal$ras_df, lt_rearing$ras_df) |>\n  dplyr::mutate(species = \"lake_trout\")\n\n# Visualize results\nlake_trout |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Lake trout life processes\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/lake_trout-1.png){width=80%}\n:::\n:::\n\n\n#### Yellow Perch\n\nThis species is a key prey item for larger fish and is also commercially valuable. Yellow perch spawn in early spring, often in shallow areas of the stream. Their eggs and larvae are vulnerable to sedimentation, which can smother eggs and reduce larval survival. The rearing process, occurring in the stream’s vegetated areas, can also be affected by sedimentation and contaminants, particularly from agricultural runoff.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define life stage periods (spawning, natal, rearing)\nlife_stages <- data.frame(\n  life_stage = c(\"spawning\", \"natal\", \"rearing\"),\n  start_date = as.Date(c(\"2024-03-01\", \"2024-04-01\", \"2024-05-01\")),\n  end_date = as.Date(c(\"2024-04-15\", \"2024-05-15\", \"2024-08-31\"))\n)\n\n# Create spatial zones for life processes\n# Spawning (shallow stream areas)\nyp_spawning <- simulate_life_process(\n  centers = matrix(c(300, 75, 200, 75), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"spawning\", 2:3],\n  bandwidth = 50\n)\nyp_spawning$ras_df$life_stage <- \"spawning\"\n\n# Natal (shallow vegetated areas)\nyp_natal <- simulate_life_process(\n  centers = matrix(c(300, 75, 200, 75), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"natal\", 2:3],\n  bandwidth = 30\n)\nyp_natal$ras_df$life_stage <- \"natal\"\n\n# Rearing (vegetated stream areas)\nyp_rearing <- simulate_life_process(\n  centers = matrix(c(500, 400, 300, 200, 75, 150, 250, 300, 250, 200, 175, 75, 75, 75), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"rearing\", 2:3],\n  bandwidth = 50\n)\nyp_rearing$ras_df$life_stage <- \"rearing\"\n\n# Bind together\nyellow_perch <- dplyr::bind_rows(yp_spawning$ras_df, yp_natal$ras_df, yp_rearing$ras_df) |>\n  dplyr::mutate(species = \"yellow_perch\")\n\n# Visualize results\nyellow_perch |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Yellow Perch life processes\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/yellow_perch-1.png){width=80%}\n:::\n:::\n\n\n\n#### Cisco\n\nCiscoes are pelagic fish that play a significant role in the food web. They spawn in deep waters during the fall, and their juvenile rearing areas are in the upper layers of the water column. Cisco are particularly vulnerable to contaminants, as these substances can accumulate in their tissues, affecting both their health and the success of their offspring.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define life stage periods (spawning, natal, rearing)\nlife_stages <- data.frame(\n  life_stage = c(\"spawning\", \"natal\", \"rearing\"),\n  start_date = as.Date(c(\"2024-10-01\", \"2024-11-01\", \"2024-06-01\")),\n  end_date = as.Date(c(\"2024-12-31\", \"2025-01-15\", \"2024-09-30\"))\n)\n\n# Create spatial zones for life processes\n# Spawning (deep waters)\ncisco_spawning <- simulate_life_process(\n  centers = matrix(c(750, 700, 650, 600, 180, 175, 170, 165), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"spawning\", 2:3],\n  bandwidth = 30\n)\ncisco_spawning$ras_df$life_stage <- \"spawning\"\n\n# Natal (pelagic upper layers, widespread)\ncisco_natal <- simulate_life_process(\n  centers = matrix(c(700, 650, 600, 175, 170, 165), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"natal\", 2:3],\n  bandwidth = 40\n)\ncisco_natal$ras_df$life_stage <- \"natal\"\n\n# Rearing (upper water column areas)\ncisco_rearing <- simulate_life_process(\n  centers = matrix(c(750, 700, 650, 600, 550, 525, 180, 175, 170, 165, 160, 150), ncol = 2),\n  raster_grid = grd,\n  period = life_stages[life_stages$life_stage == \"rearing\", 2:3],\n  bandwidth = 50\n)\ncisco_rearing$ras_df$life_stage <- \"rearing\"\n\n# Bind together\ncisco <- dplyr::bind_rows(cisco_spawning$ras_df, cisco_natal$ras_df, cisco_rearing$ras_df) |>\n  dplyr::mutate(species = \"cisco\")\n\n# Visualize results\ncisco |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Cisco life processes\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/cisco-1.png){width=80%}\n:::\n:::\n\n\n\n## Stressors \n\n### Sedimentation from Dredging\n\nDredging activities in the stream disturb the riverbed, releasing fine sediments that can smother fish eggs, disrupt spawning grounds, and negatively impact water quality. Sedimentation reduces water clarity and light penetration, harming the rearing habitats for yellow perch and lake trout by limiting oxygen levels and impairing vegetation growth. Additionally, dredging physically alters habitats by removing critical substrates, such as rocks and vegetation, essential for spawning and rearing. It can also mobilize contaminants like heavy metals and hydrocarbons trapped in sediments, introducing toxic substances into the water and posing risks to aquatic species and ecosystem health. While dredging presents numerous potential stressors, we consider sedimentation, habitat destruction, and contaminant release as primary concerns in our fictitious lake.\n\nDredging activities in the lake occur at two known locations: the northern end of the ferry route and a public dock situated at the southwest end of the lake. These recurring dredging activities are associated with sedimentation, habitat destruction, and contaminant release, which pose risks to aquatic species. Sedimentation from dredging reduces water clarity and smothers fish eggs in nearby spawning and rearing habitats. Habitat destruction impacts critical substrates, while mobilized contaminants from disturbed sediments can introduce toxic substances into the water. \n\nDredging activities are typically carried out during warmer months, from late spring to early fall (May to September), when conditions are more favorable for construction work and equipment operation. These activities pause during the mild winter months when reduced water temperatures and ice formation on the shoreline make dredging less practical.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define stressors from dredging\ndredging_stressors <- data.frame(\n  stressor = c(\"sedimentation\", \"habitat_destruction\", \"contaminants\"),\n  start_date = as.Date(c(\"2024-05-01\", \"2024-05-01\", \"2024-05-01\")), # Start of dredging period\n  end_date = as.Date(c(\"2024-06-30\", \"2024-06-30\", \"2024-06-30\")), # End of dredging period\n  intensity = c(1.0, 0.7, 0.5), # Relative intensity of each stressor\n  bandwidth = c(50, 20, 30) # Bandwidth for spatial distribution\n)\n\n# Define dredging activity locations\ndredging_locations <- matrix(c(\n  650, 350, # Northern end of the ferry route\n  75, 75 # Public dock near the southern shoreline\n), ncol = 2, byrow = TRUE)\n\n# Simulate distribution and intensity for each stressor\ndredging_results <- lapply(1:nrow(dredging_stressors), function(i) {\n  simulate_life_process(\n    centers = dredging_locations,\n    raster_grid = grd,\n    period = dredging_stressors[i, c(\"start_date\", \"end_date\")], # Stressor-specific period\n    time_steps = seq.Date(dredging_stressors$start_date[i], dredging_stressors$end_date[i], by = \"month\"),\n    n_samples = 100, # Number of disturbance points\n    bandwidth = dredging_stressors$bandwidth[i], # Stressor-specific bandwidth\n    prob_threshold = 0.05 # Probability threshold\n  )\n})\n\n# Combine all results into a single data frame\ndredging <- lapply(seq_along(dredging_results), function(i) {\n  dredging_results[[i]]$ras_df |>\n    dplyr::mutate(life_stage = dredging_stressors$stressor[i]) # Add stressor label\n}) |>\n  dplyr::bind_rows() |>\n  dplyr::mutate(activity = \"dredging\")\n\n\n# Visualize results for each stressor\ndredging |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Dredging Stressors Distribution\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/dredging_stressors-1.png){width=80%}\n:::\n:::\n\n\n\n### Contaminants from Agricultural Runoff\n\nAgricultural runoff, including pesticides and fertilizers, introduces toxic substances into the water, affecting species health and reproductive success. These contaminants, particularly nitrates and phosphates, can lead to eutrophication, reducing oxygen levels and impairing the development of fish larvae, especially for species like the yellow perch and cisco.\n\nAgricultural runoff is most pronounced during the growing and harvest seasons, typically from late spring to early fall (May to October). Fertilizer and pesticide applications in spring, combined with summer irrigation and heavy rainfall events, increase the likelihood of nutrient and contaminant runoff into the lake. Runoff diminishes in the winter due to reduced agricultural activity, although occasional thaw events could still contribute to nutrient loading.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define life stage periods for runoff intensity\nrunoff_intensity <- data.frame(\n  season = c(\"spring\", \"summer\", \"fall\"),\n  start_date = as.Date(c(\"2024-04-01\", \"2024-06-01\", \"2024-09-01\")),\n  end_date = as.Date(c(\"2024-05-31\", \"2024-08-31\", \"2024-10-31\")),\n  intensity = c(1.0, 0.5, 0.8), # Relative intensity for each period\n  bandwidth = c(70, 30, 60), # Bandwidth for spatial spread\n  n_samples = c(300, 100, 225) # Sample size for each season\n)\n\n# Create spatial zones for runoff (same locations for all seasons)\nrunoff_centers <- matrix(c(\n  200, 0, # Location 1\n  900, 50, # Location 2\n  400, 300 # Location 3\n), ncol = 2, byrow = TRUE)\n\n# Simulate runoff for each season with custom parameters\nrunoff_results <- lapply(1:nrow(runoff_intensity), function(i) {\n  simulate_life_process(\n    centers = runoff_centers,\n    raster_grid = grd,\n    period = runoff_intensity[i, c(\"start_date\", \"end_date\")], # Season's time range\n    time_steps = seq.Date(runoff_intensity$start_date[i], runoff_intensity$end_date[i], by = \"month\"),\n    n_samples = runoff_intensity$n_samples[i], # Custom sample size\n    bandwidth = runoff_intensity$bandwidth[i], # Custom bandwidth\n    prob_threshold = 0.05 # Threshold for affected areas\n  )\n})\n\n# Combine all results into one data frame\nagricultural_runoff <- lapply(seq_along(runoff_results), function(i) {\n  runoff_results[[i]]$ras_df |>\n    dplyr::mutate(life_stage = \"contaminants\") # Add season label\n}) |>\n  dplyr::bind_rows() |>\n  dplyr::mutate(activity = \"agriculture\")\n\n# Visualize results\nagricultural_runoff |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Agricultural Runoff Stressor\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/agricultural_runoff-1.png){width=80%}\n:::\n:::\n\n\n\n### Ferry Operations\n\nA ferry connecting the northern and southern shores of the lake creates continuous surface disturbances and underwater noise that can disrupt fish behavior, particularly during spawning and rearing periods. The ferry's propeller wash and regular crossings can also resuspend sediments, exacerbating turbidity and potentially impacting sensitive nearshore habitats.\n\nThe ferry operates year-round, as the mild winter conditions in the region do not inhibit its function. The ferry’s crossings are frequent and consistent throughout the year, creating continuous surface disturbances, noise, and sediment resuspension that may impact fish behavior and habitat quality at any time, with potentially heightened effects during sensitive life processes such as spawning and rearing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the ferry route as a line connecting the northern and southern shores\nferry_route <- matrix(c(\n  650, 350, # Northern shore (start point)\n  550, 0 # Southern shore (end point)\n), ncol = 2, byrow = TRUE)\n\n# Convert the ferry route to an `sf` object\nferry_route_sf <- st_linestring(ferry_route) |>\n  st_sfc(crs = st_crs(grd)) |>\n  st_sf()\n\n# Sample points along the ferry route\ncenters <- st_sample(ferry_route_sf, size = 20) |>\n  st_coordinates()\ncolnames(centers) <- c(\"V1\", \"V2\", \"L\")\n\n# Simulate ferry operations as a constant year-round stressor\nferry_operations <- simulate_life_process(\n  centers = centers,\n  raster_grid = grd,\n  period = as.Date(c(\"2024-01-01\", \"2024-12-31\")), # Year-round\n  time_steps = seq.Date(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"month\"), # Monthly steps\n  n_samples = 100, # Number of ferry-related disturbances per time step\n  bandwidth = 30, # Bandwidth for disturbance spread\n  prob_threshold = 0.05 # Threshold for identifying affected areas\n)\n\nferry <- ferry_operations$ras_df |>\n  dplyr::mutate(\n    life_stage = \"disturbance\",\n    activity = \"ferry operations\"\n  )\n\n# Visualize results\nferry |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(month, life_stage) |>\n  make_facets(\"Ferry operations intensity\")\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/ferry_operations-1.png){width=80%}\n:::\n:::\n\n\n\n## Sensitivity \n\nThe sensitivity values were assigned to reflect the relative vulnerability of different species and life stages to the four stressors identified in the system: sedimentation, habitat destruction, contaminants, and ferry operations. These values are scaled to ensure comparability across stressors, with a value of `1.0` representing the maximum expected sensitivity to a given stressor.\n\n- **Sedimentation**: \n  - Sedimentation poses the greatest risk to spawning life stages, particularly for **lake trout** (`1.0`) and **yellow perch** (`0.9`), as fine sediments can smother eggs and degrade spawning habitats. \n  - The sensitivity of **cisco** to sedimentation is lower during spawning (`0.8`), reflecting their preference for deeper waters, where sedimentation effects are somewhat mitigated. \n  - Natal and rearing stages exhibit reduced sensitivity across all species due to their lower reliance on sediment-free habitats.\n\n- **Habitat Destruction**: \n  - Habitat destruction significantly affects **lake trout** spawning (`1.0`) and natal (`0.8`) stages, as they depend heavily on stable substrates and intact habitats. \n  - **Yellow perch** are similarly affected during spawning (`0.9`) and natal (`0.7`) stages. \n  - **Cisco** exhibit moderate sensitivity (`0.8` for spawning), reflecting their broader habitat tolerance.\n\n- **Contaminants**:\n  - Contaminants, including those released by dredging and agricultural runoff, disproportionately affect the natal (`0.9`) and rearing (`0.8`) stages of **lake trout** and **yellow perch**, as juveniles are more susceptible to toxic substances during development. \n  - **Cisco** are highly sensitive to contaminants during spawning (`1.0`) and natal stages (`0.9`), due to bioaccumulation in pelagic environments.\n\n- **Ferry Operations**:\n  - Ferry operations, primarily through underwater noise and disturbances, pose lower risks compared to other stressors. \n  - **Yellow perch** exhibit moderate sensitivity during rearing (`0.5`), reflecting their proximity to shoreline areas where ferry activity is concentrated. \n  - **Lake trout** and **cisco** show reduced sensitivity overall, with spawning (`0.6` and `0.5`, respectively) being the most affected life stage due to potential behavioral disruptions caused by noise.\n\nThe sensitivity values emphasize the interplay between species-specific ecological traits, life stage vulnerabilities, and stressor-specific impacts. Spawning stages across all species are consistently more sensitive to sedimentation and habitat destruction, while natal and rearing stages show heightened vulnerabilities to contaminants. Ferry operations, although less impactful, still contribute to cumulative risks, particularly for species reliant on shoreline or shallow-water habitats. \n\nThis sensitivity framework provides a basis for quantifying and mapping risks, guiding the identification of optimal timing and spatial windows for interventions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create updated sensitivity data frame\nsensitivity <- data.frame(\n  stressor = rep(\n    c(\n      rep(\"sedimentation\", 3),\n      rep(\"habitat_destruction\", 3),\n      rep(\"contaminants\", 3),\n      rep(\"disturbance\", 3)\n    ),\n    3\n  ),\n  species = c(\n    rep(\"lake_trout\", 12),\n    rep(\"yellow_perch\", 12),\n    rep(\"cisco\", 12)\n  ),\n  life_stage = rep(c(\"spawning\", \"natal\", \"rearing\"), 12),\n  sensitivity = c(\n    # Lake Trout Sensitivity\n    1.0, 0.7, 0.5, # Sedimentation\n    1.0, 0.8, 0.6, # Habitat Destruction\n    0.9, 0.9, 0.8, # Contaminants\n    0.6, 0.5, 0.4, # Ferry Operations\n    # Yellow Perch Sensitivity\n    0.9, 0.7, 0.6, # Sedimentation\n    0.9, 0.7, 0.7, # Habitat Destruction\n    0.8, 0.9, 0.8, # Contaminants\n    0.7, 0.6, 0.5, # Ferry Operations\n    # Cisco Sensitivity\n    0.8, 0.6, 0.5, # Sedimentation\n    0.8, 0.7, 0.6, # Habitat Destruction\n    1.0, 0.9, 0.7, # Contaminants\n    0.5, 0.4, 0.3 # Ferry Operations\n  )\n)\n\n# Create a heatmap of sensitivities\nsensitivity |>\n  dplyr::mutate(name = glue::glue(\"{species}_{life_stage}\")) |>\n  ggplot(aes(x = name, y = stressor, fill = sensitivity)) +\n  geom_tile(color = \"white\") +\n  scale_fill_viridis_c(option = \"D\", name = \"Sensitivity\") +\n  labs(\n    title = \"Sensitivity Heatmap\",\n    x = \"Life Stage\",\n    y = \"Stressor\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 10),\n    panel.grid = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/sensitivity-1.png){width=80%}\n:::\n:::\n\n\n\n## Risk assessment \n\nNow we have all the data necessary to perform a spatially and temporally explicit rcumulative risk assessment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Species\nspecies <- dplyr::bind_rows(lake_trout, yellow_perch, cisco) |>\n  dplyr::rename(species_presence = presence)\nknitr::kable(head(species))\n```\n\n::: {.cell-output-display}\n\n\n|     x|     y|date       | species_presence|life_stage |species    |\n|-----:|-----:|:----------|----------------:|:----------|:----------|\n| 762.5| 372.5|2024-10-01 |                0|spawning   |lake_trout |\n| 762.5| 372.5|2024-11-01 |                0|spawning   |lake_trout |\n| 767.5| 372.5|2024-10-01 |                0|spawning   |lake_trout |\n| 767.5| 372.5|2024-11-01 |                0|spawning   |lake_trout |\n| 772.5| 372.5|2024-10-01 |                0|spawning   |lake_trout |\n| 772.5| 372.5|2024-11-01 |                0|spawning   |lake_trout |\n\n\n:::\n\n```{.r .cell-code}\n# Stressors\nstressors <- dplyr::bind_rows(dredging, agricultural_runoff, ferry) |>\n  dplyr::rename(stressor_presence = presence, stressor = life_stage)\nknitr::kable(head(stressors))\n```\n\n::: {.cell-output-display}\n\n\n|     x|     y|date       | stressor_presence|stressor      |activity |\n|-----:|-----:|:----------|-----------------:|:-------------|:--------|\n| 762.5| 372.5|2024-05-01 |         0.2821701|sedimentation |dredging |\n| 762.5| 372.5|2024-06-01 |         0.0846510|sedimentation |dredging |\n| 767.5| 372.5|2024-05-01 |         0.2257361|sedimentation |dredging |\n| 767.5| 372.5|2024-06-01 |         0.0846510|sedimentation |dredging |\n| 772.5| 372.5|2024-05-01 |         0.2257361|sedimentation |dredging |\n| 772.5| 372.5|2024-06-01 |         0.0846510|sedimentation |dredging |\n\n\n:::\n\n```{.r .cell-code}\n# Sensitivity\nsensitivity <- sensitivity |>\n  dplyr::select(stressor, species, life_stage, sensitivity)\nknitr::kable(head(sensitivity))\n```\n\n::: {.cell-output-display}\n\n\n|stressor            |species    |life_stage | sensitivity|\n|:-------------------|:----------|:----------|-----------:|\n|sedimentation       |lake_trout |spawning   |         1.0|\n|sedimentation       |lake_trout |natal      |         0.7|\n|sedimentation       |lake_trout |rearing    |         0.5|\n|habitat_destruction |lake_trout |spawning   |         1.0|\n|habitat_destruction |lake_trout |natal      |         0.8|\n|habitat_destruction |lake_trout |rearing    |         0.6|\n\n\n:::\n:::\n\n\nNow let us assess the risks present in our fictitious lake based on the information that we have. As previously presented, we propose to use an additive cumulative risk model that considers both time and space to assess the risks of each stressor to each life stage in our system. We will begin by assessing the risk at each time step and in each cell of the study grid. This assessment would essentially represent the baseline risk levels in our fictitious lake base on the intensity of stressors, the distribution of life stages, and the sensitivity of life stages to stressors. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrisk <- dplyr::full_join(species, stressors, by = c(\"x\", \"y\", \"date\"), relationship = \"many-to-many\") |>\n  na.omit() |>\n  dplyr::left_join(sensitivity, by = c(\"stressor\", \"species\", \"life_stage\")) |>\n  dplyr::mutate(risk = species_presence * stressor_presence * sensitivity) |>\n  dplyr::filter(risk > 0) |>\n  dplyr::select(x, y, date, life_stage, species, stressor, activity, risk)\nknitr::kable(head(risk))\n```\n\n::: {.cell-output-display}\n\n\n|     x|     y|date       |life_stage |species    |stressor    |activity         |      risk|\n|-----:|-----:|:----------|:----------|:----------|:-----------|:----------------|---------:|\n| 737.5| 362.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000294|\n| 742.5| 362.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000294|\n| 727.5| 357.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000281|\n| 732.5| 357.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000281|\n| 737.5| 357.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000281|\n| 712.5| 352.5|2024-10-01 |spawning   |lake_trout |disturbance |ferry operations | 0.0000546|\n\n\n:::\n\n```{.r .cell-code}\n# Visualize monthly cumulative risk\ntmp <- risk |>\n  dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n  dplyr::group_by(x, y, month) |>\n  dplyr::summarise(cum_risk = sum(risk)) |>\n  dplyr::ungroup()\n\n# Function to create faceted raster figures with AOI polygon\nggplot(tmp, aes(x = x, y = y, fill = cum_risk)) +\n  geom_tile() +\n  facet_wrap(~month, ncol = 3) +\n  scale_fill_gradientn(\n    colors = viridis::viridis(100),\n    na.value = \"grey\",\n    name = \"Cumulative Risk\"\n  ) +\n  labs(\n    x = \"Longitude\",\n    y = \"Latitude\",\n    title = \"Monthly Cumulative Risk\"\n  ) +\n  coord_fixed() +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text = element_text(size = 8),\n    panel.grid = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/risk_assessment-1.png){width=80%}\n:::\n:::\n\n\n## Timing and Spacing Windows assessments\n\nNow let us finally explore the reasoning behing this work: identify time and/or space windows to optimize interventions in our fictitious lakes based on the knowledge that we have in the lake. We will divide this section to explore the possibilities offered by the model as a function of data availability and integrated vs non-integrated ecosystem management. The integrated vs non-integrated management will simply consider or not consider pre-existing risks in the system, respectively. Then we can either wish to minizimize potential impacts from planned projects through the project appraisal phase, which can be done in an integrated or non-integrated framework, or we can attempt to maximize outcomes of management actions, which we will always look at through the lense of integrated management. \n\n### Project appraisal\n\nWe begin with project appraisal, i.e. attempting to minimize the affects of a proposed project. For our example, let us imagine that there is a project under review that wishes to incorporate an additional dock for pleasure vessels on the lake. Since dredging activies are performed typically from late spring to early fall (May to September), we will perform the assessment for that period.\n\n#### Temporal data \n\nWe begin with an assessment based solely on temporal data. In this case, the only assessment possible is the identification of an optimal timing window for intervention. Let us simplify our risk assessment and remove all spatial information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Species\nsp <- species |>\n  dplyr::group_by(date, species, life_stage) |>\n  dplyr::summarise(species_presence = sum(species_presence)) |>\n  dplyr::ungroup() |>\n  dplyr::mutate(species_presence = dplyr::if_else(species_presence > 0, 1, 0))\nknitr::kable(head(sp))\n```\n\n::: {.cell-output-display}\n\n\n|date       |species      |life_stage | species_presence|\n|:----------|:------------|:----------|----------------:|\n|2024-03-01 |yellow_perch |spawning   |                1|\n|2024-04-01 |lake_trout   |natal      |                1|\n|2024-04-01 |yellow_perch |natal      |                1|\n|2024-04-01 |yellow_perch |spawning   |                1|\n|2024-05-01 |lake_trout   |natal      |                1|\n|2024-05-01 |yellow_perch |natal      |                1|\n\n\n:::\n\n```{.r .cell-code}\n# Stressors\nst <- stressors |>\n  dplyr::group_by(date, activity, stressor) |>\n  dplyr::summarise(stressor_presence = sum(stressor_presence)) |>\n  dplyr::ungroup() |>\n  dplyr::mutate(stressor_presence = dplyr::if_else(stressor_presence > 0, 1, 0))\nknitr::kable(head(st))\n```\n\n::: {.cell-output-display}\n\n\n|date       |activity         |stressor     | stressor_presence|\n|:----------|:----------------|:------------|-----------------:|\n|2024-01-01 |ferry operations |disturbance  |                 1|\n|2024-02-01 |ferry operations |disturbance  |                 1|\n|2024-03-01 |ferry operations |disturbance  |                 1|\n|2024-04-01 |agriculture      |contaminants |                 1|\n|2024-04-01 |ferry operations |disturbance  |                 1|\n|2024-05-01 |agriculture      |contaminants |                 1|\n\n\n:::\n\n```{.r .cell-code}\n# Planned stressors\ntime_planned <- seq(as.Date(\"2024-05-01\"), as.Date(\"2024-09-30\"), by = \"month\")\nstress_planned <- c(\"sedimentation\", \"habitat_destruction\", \"contaminants\")\nplanned_st <- data.frame(\n  date = as.character(rep(time_planned, length(stress_planned))),\n  stressor = rep(stress_planned, length(time_planned)),\n  activity = \"dredging_planned\",\n  stressor_presence = 1\n)\nknitr::kable(head(planned_st))\n```\n\n::: {.cell-output-display}\n\n\n|date       |stressor            |activity         | stressor_presence|\n|:----------|:-------------------|:----------------|-----------------:|\n|2024-05-01 |sedimentation       |dredging_planned |                 1|\n|2024-06-01 |habitat_destruction |dredging_planned |                 1|\n|2024-07-01 |contaminants        |dredging_planned |                 1|\n|2024-08-01 |sedimentation       |dredging_planned |                 1|\n|2024-09-01 |habitat_destruction |dredging_planned |                 1|\n|2024-05-01 |contaminants        |dredging_planned |                 1|\n\n\n:::\n\n```{.r .cell-code}\n# Combined stressors\nst <- dplyr::bind_rows(st, planned_st)\n\n# Risk\nrsk_all <- dplyr::full_join(sp, st, by = c(\"date\"), relationship = \"many-to-many\") |>\n  na.omit() |>\n  dplyr::left_join(sensitivity, by = c(\"stressor\", \"species\", \"life_stage\")) |>\n  dplyr::mutate(risk = species_presence * stressor_presence * sensitivity) |>\n  dplyr::filter(risk > 0) |>\n  dplyr::select(date, life_stage, species, stressor, activity, risk) |>\n  dplyr::arrange(activity, stressor, date)\nknitr::kable(head(rsk_all))\n```\n\n::: {.cell-output-display}\n\n\n|date       |life_stage |species      |stressor     |activity    | risk|\n|:----------|:----------|:------------|:------------|:-----------|----:|\n|2024-04-01 |natal      |lake_trout   |contaminants |agriculture |  0.9|\n|2024-04-01 |natal      |yellow_perch |contaminants |agriculture |  0.9|\n|2024-04-01 |spawning   |yellow_perch |contaminants |agriculture |  0.8|\n|2024-05-01 |natal      |lake_trout   |contaminants |agriculture |  0.9|\n|2024-05-01 |natal      |yellow_perch |contaminants |agriculture |  0.9|\n|2024-05-01 |rearing    |yellow_perch |contaminants |agriculture |  0.8|\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative risk - integrated\nrskcum_int <- rsk_all |>\n  dplyr::group_by(date) |>\n  dplyr::summarise(cum_risk = sum(risk)) |>\n  dplyr::ungroup()\nrskcum_int <- data.frame(\n  date = seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"month\") |>\n    as.character()\n) |>\n  dplyr::left_join(rskcum_int, by = \"date\") |>\n  dplyr::mutate(\n    cum_risk = if_else(is.na(cum_risk), 0, cum_risk),\n    integrated = TRUE\n  )\nknitr::kable(rskcum_int)\n```\n\n::: {.cell-output-display}\n\n\n|date       | cum_risk|integrated |\n|:----------|--------:|:----------|\n|2024-01-01 |      0.0|TRUE       |\n|2024-02-01 |      0.0|TRUE       |\n|2024-03-01 |      0.7|TRUE       |\n|2024-04-01 |      4.4|TRUE       |\n|2024-05-01 |     17.8|TRUE       |\n|2024-06-01 |     15.1|TRUE       |\n|2024-07-01 |      9.3|TRUE       |\n|2024-08-01 |      9.3|TRUE       |\n|2024-09-01 |      2.8|TRUE       |\n|2024-10-01 |      3.0|TRUE       |\n|2024-11-01 |      1.5|TRUE       |\n|2024-12-01 |      0.9|TRUE       |\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative risk - non-integrated\nrskcum_non_int <- rsk_all |>\n  dplyr::filter(activity == \"dredging_planned\") |>\n  dplyr::group_by(date) |>\n  dplyr::summarise(cum_risk = sum(risk)) |>\n  dplyr::ungroup()\nrskcum_non_int <- data.frame(\n  date = seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"month\") |>\n    as.character()\n) |>\n  dplyr::left_join(rskcum_non_int, by = \"date\") |>\n  dplyr::mutate(\n    cum_risk = if_else(is.na(cum_risk), 0, cum_risk),\n    integrated = FALSE\n  )\nknitr::kable(rskcum_int)\n```\n\n::: {.cell-output-display}\n\n\n|date       | cum_risk|integrated |\n|:----------|--------:|:----------|\n|2024-01-01 |      0.0|TRUE       |\n|2024-02-01 |      0.0|TRUE       |\n|2024-03-01 |      0.7|TRUE       |\n|2024-04-01 |      4.4|TRUE       |\n|2024-05-01 |     17.8|TRUE       |\n|2024-06-01 |     15.1|TRUE       |\n|2024-07-01 |      9.3|TRUE       |\n|2024-08-01 |      9.3|TRUE       |\n|2024-09-01 |      2.8|TRUE       |\n|2024-10-01 |      3.0|TRUE       |\n|2024-11-01 |      1.5|TRUE       |\n|2024-12-01 |      0.9|TRUE       |\n\n\n:::\n\n```{.r .cell-code}\n# Bind together\nrskcum <- dplyr::bind_rows(rskcum_int, rskcum_non_int) |>\n  dplyr::mutate(date = lubridate::as_date(date))\n\n# Timing windows\n## Integrated\nwindow <- 1\ntw <- rbind(\n  calculate_optimal_timing(rskcum_int,\n    window_size = window,\n    period_start = \"2024-06-01\",\n    period_end = \"2024-08-31\",\n    wrap = TRUE\n  ),\n  calculate_optimal_timing(rskcum_non_int,\n    window_size = window,\n    period_start = \"2024-06-01\",\n    period_end = \"2024-08-31\",\n    wrap = TRUE\n  )\n)\n\n# Visualize\nplot_cumulative_risk(risk_data = rskcum, timing_data = tw)\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/unnamed-chunk-12-1.png){width=80%}\n:::\n:::\n\n\n\n#### Spatial data \n\nTODO: space optimization\n\n\n#### Spatiotemporal data \n\nTODO: space optimization\nTODO: space-time optimization\n\nNow we will explore how to use the spatio-temporal data to identify timing windows that minimize the risks posed by the proposed project. In this particular example, we will start by a known location for the project, then we will propose two different places to select the place and time that would minimize the effects of the project.\n\nThe first location will be located at the same spot as the northern end of the ferry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndredging_stressors <- data.frame(\n  stressor = c(\"sedimentation\", \"habitat_destruction\", \"contaminants\"),\n  start_date = as.Date(c(\"2024-06-01\", \"2024-06-01\", \"2024-06-01\")), # Start of dredging period\n  end_date = as.Date(c(\"2024-08-31\", \"2024-08-31\", \"2024-08-31\")), # End of dredging period\n  intensity = c(1.0, 0.7, 0.5), # Relative intensity of each stressor\n  bandwidth = c(50, 20, 30) # Bandwidth for spatial distribution\n)\n\n# Define dredging activity locations\ndredging_locations <- matrix(c(\n  650, 350 # , # Southern end of the ferry route\n  # 75, 75 # Public dock near the southern shoreline\n), ncol = 2, byrow = TRUE)\n\n# Simulate distribution and intensity for each stressor\ndredging_results <- lapply(1:nrow(dredging_stressors), function(i) {\n  simulate_life_process(\n    centers = dredging_locations,\n    raster_grid = grd,\n    period = dredging_stressors[i, c(\"start_date\", \"end_date\")], # Stressor-specific period\n    time_steps = seq.Date(dredging_stressors$start_date[i], dredging_stressors$end_date[i], by = \"month\"),\n    n_samples = 100, # Number of disturbance points\n    bandwidth = dredging_stressors$bandwidth[i], # Stressor-specific bandwidth\n    prob_threshold = 0.05 # Probability threshold\n  )\n})\n\n# Combine all results into a single data frame\nplanned_dredging <- lapply(seq_along(dredging_results), function(i) {\n  dredging_results[[i]]$ras_df |>\n    dplyr::mutate(life_stage = dredging_stressors$stressor[i]) # Add stressor label\n}) |>\n  dplyr::bind_rows() |>\n  dplyr::mutate(activity = \"dredging_planned\") |>\n  dplyr::rename(stressor_presence = presence, stressor = life_stage)\n\n# planned_dredging |>\n#   dplyr::mutate(month = format(as.Date(date), \"%Y-%m\")) |>\n#   dplyr::group_by(month, life_stage) |>\n#   make_facets(\"Ferry operations intensity\")\n\n\n# Combined stressors\nst <- dplyr::bind_rows(stressors, planned_dredging)\n\n# Risk\nrsk_all <- dplyr::full_join(species, st, by = c(\"x\", \"y\", \"date\"), relationship = \"many-to-many\") |>\n  na.omit() |>\n  dplyr::left_join(sensitivity, by = c(\"stressor\", \"species\", \"life_stage\")) |>\n  dplyr::mutate(risk = species_presence * stressor_presence * sensitivity) |>\n  dplyr::filter(risk > 0) |>\n  dplyr::select(x, y, date, life_stage, species, stressor, activity, risk) |>\n  dplyr::arrange(activity, stressor, date)\nknitr::kable(head(rsk_all))\n```\n\n::: {.cell-output-display}\n\n\n|     x|     y|date       |life_stage |species    |stressor     |activity    |      risk|\n|-----:|-----:|:----------|:----------|:----------|:------------|:-----------|---------:|\n| 852.5| 292.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0051136|\n| 827.5| 287.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0086039|\n| 832.5| 287.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0042208|\n| 837.5| 287.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0045455|\n| 842.5| 287.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0046266|\n| 847.5| 287.5|2024-04-01 |natal      |lake_trout |contaminants |agriculture | 0.0051136|\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative risk - integrated\nrskcum_int <- rsk_all |>\n  dplyr::group_by(date) |>\n  dplyr::summarise(cum_risk = sum(risk)) |>\n  dplyr::ungroup()\nrskcum_int <- data.frame(\n  date = seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"month\") |>\n    as.character()\n) |>\n  dplyr::left_join(rskcum_int, by = \"date\") |>\n  dplyr::mutate(\n    cum_risk = if_else(is.na(cum_risk), 0, cum_risk),\n    integrated = TRUE\n  )\nknitr::kable(rskcum_int)\n```\n\n::: {.cell-output-display}\n\n\n|date       | cum_risk|integrated |\n|:----------|--------:|:----------|\n|2024-01-01 |   0.0000|TRUE       |\n|2024-02-01 |   0.0000|TRUE       |\n|2024-03-01 |   0.0000|TRUE       |\n|2024-04-01 | 278.1089|TRUE       |\n|2024-05-01 | 919.3124|TRUE       |\n|2024-06-01 | 484.9826|TRUE       |\n|2024-07-01 | 255.2409|TRUE       |\n|2024-08-01 | 247.2416|TRUE       |\n|2024-09-01 | 117.8172|TRUE       |\n|2024-10-01 | 108.5693|TRUE       |\n|2024-11-01 | 129.6708|TRUE       |\n|2024-12-01 | 122.6382|TRUE       |\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative risk - non-integrated\nrskcum_non_int <- rsk_all |>\n  dplyr::filter(activity == \"dredging_planned\") |>\n  dplyr::group_by(date) |>\n  dplyr::summarise(cum_risk = sum(risk)) |>\n  dplyr::ungroup()\nrskcum_non_int <- data.frame(\n  date = seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"month\") |>\n    as.character()\n) |>\n  dplyr::left_join(rskcum_non_int, by = \"date\") |>\n  dplyr::mutate(\n    cum_risk = if_else(is.na(cum_risk), 0, cum_risk),\n    integrated = FALSE\n  )\nknitr::kable(rskcum_non_int)\n```\n\n::: {.cell-output-display}\n\n\n|date       | cum_risk|integrated |\n|:----------|--------:|:----------|\n|2024-01-01 |  0.00000|FALSE      |\n|2024-02-01 |  0.00000|FALSE      |\n|2024-03-01 |  0.00000|FALSE      |\n|2024-04-01 |  0.00000|FALSE      |\n|2024-05-01 |  0.00000|FALSE      |\n|2024-06-01 | 30.11988|FALSE      |\n|2024-07-01 | 23.09362|FALSE      |\n|2024-08-01 | 20.48776|FALSE      |\n|2024-09-01 |  0.00000|FALSE      |\n|2024-10-01 |  0.00000|FALSE      |\n|2024-11-01 |  0.00000|FALSE      |\n|2024-12-01 |  0.00000|FALSE      |\n\n\n:::\n\n```{.r .cell-code}\n# Bind together\nrskcum <- dplyr::bind_rows(rskcum_int, rskcum_non_int) |>\n  dplyr::mutate(date = lubridate::as_date(date))\n\n# Timing windows\n## Integrated\nwindow <- 1\ntw <- rbind(\n  calculate_optimal_timing(rskcum_int,\n    window_size = window,\n    period_start = \"2024-06-01\",\n    period_end = \"2024-08-31\",\n    wrap = TRUE\n  ),\n  calculate_optimal_timing(rskcum_non_int,\n    window_size = window,\n    period_start = \"2024-06-01\",\n    period_end = \"2024-08-31\",\n    wrap = TRUE\n  )\n)\n\n# Visualize\nplot_cumulative_risk(risk_data = rskcum, timing_data = tw)\n```\n\n::: {.cell-output-display}\n![](lake_example_files/figure-html/unnamed-chunk-13-1.png){width=80%}\n:::\n:::\n\n\n\n\n\n\n\n\n\n---\n\n**4. Explore Optimization Approaches**\n- **Time Optimization**:\n  - Use a sliding window to identify periods with minimal risk for interventions (e.g., spawning windows).\n  - Explore tools like `zoo::rollapply` or `RcppRoll` for rolling calculations.\n- **Space Optimization**:\n  - Identify low-risk areas using spatial clustering or graph-based methods (e.g., `terra` for raster operations or `igraph` for connectivity).\n- **Space-Time Optimization**:\n  - Combine the outputs of spatial and temporal analyses to identify optimal windows in both dimensions.\n  - Use spatio-temporal clustering algorithms like **DBSCAN** or create dynamic risk maps.\n\n---\n\n**5. Build a Conceptual Figure**\n- **Design Elements**:\n  - **Layer 1**: Temporal risk trends (e.g., a line chart showing risk over time).\n  - **Layer 2**: Spatial risk distribution (e.g., a heatmap or risk surface).\n  - **Layer 3**: Combined spatio-temporal dynamics (e.g., a time-series of maps or 3D surface plot).\n- Tools for Figure:\n  - Use `ggplot2` for basic visualizations or `leaflet`/`sf` for spatial data.\n  - For conceptual illustrations, use tools like `PowerPoint`, `Illustrator`, or `Inkscape`.\n\n---\n\n**6. Iterate with Simplified Data**\n- Start with **simplified data** to validate the framework and ensure calculations are accurate.\n- Once confident in the approach, scale up to include the full set of species, life processes, and stressors.\n\n---\n\n**7. Document Insights**\n- For each optimization dimension (time, space, space-time), record:\n  - The methods used.\n  - Key findings (e.g., optimal timing windows or spatial hotspots).\n  - How these findings align with the fictitious example.\n\n---\n\n**8. Refine and Finalize Outputs**\n- Fine-tune the risk assessment and optimization results.\n- Create polished versions of the conceptual figure and any supplementary visualizations.\n- Ensure all insights are directly tied back to the fictitious example for clarity and relevance.\n\n---\n\n**9. Validate the Workflow**\n- Conduct a quick peer review or self-check to ensure the logic of the example aligns with the proposed framework.\n- Adjust any methods or figures based on feedback or additional insights.\n\nThis structured workflow ensures you make steady progress on the fish example while systematically exploring optimization approaches and developing a clear conceptual figure. Let me know if you’d like detailed help with any step!\n\n\n\n\n\n\n",
    "supporting": [
      "lake_example_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}